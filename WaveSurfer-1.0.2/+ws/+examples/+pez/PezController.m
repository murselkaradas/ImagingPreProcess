classdef PezController < handle
    
    properties (Dependent)
        FigurePosition
    end
    
    properties (Access=private)
        Model_
        Figure_
        
        TrialSequenceModeLabel_
        TrialSequenceModePopupMenu_
        ReturnDelayLabelledEdit_
        ResetButton_

        %DispenseToneCheckbox_
        %DispenseToneFrequencyLabelledEdit_
        
        Condition1Label_
        ToneFrequency1LabelledEdit_
        ToneDuration1LabelledEdit_
        ToneDelay1LabelledEdit_
        DispenseDelay1LabelledEdit_
        DeliverPosition1XLabelledEdit_
        DeliverPosition1YLabelledEdit_
        DeliverPosition1ZLabelledEdit_        
        DispensePosition1ZLabelledEdit_
        
        Condition2Label_
        ToneFrequency2LabelledEdit_
        ToneDuration2LabelledEdit_
        ToneDelay2LabelledEdit_
        DispenseDelay2LabelledEdit_
        DeliverPosition2XLabelledEdit_
        DeliverPosition2YLabelledEdit_
        DeliverPosition2ZLabelledEdit_        
        DispensePosition2ZLabelledEdit_                
    end

    methods
        function self = PezController(model)
            self.Model_ = model ;
            fig = figure('Name', 'Pez', ...
                         'MenuBar', 'none', ...
                         'IntegerHandle', 'off', ...
                         'Resize', 'off', ...
                         'CloseRequestFcn', @(source, event)(ws.nop()), ...
                         'HandleVisibility', 'off') ;
                % Make the figure un-closable, since no way to get it back if it gets closed...     
            self.Figure_ = fig ;
            
            % First row (from top)
            self.TrialSequenceModeLabel_ = ...
                ws.uicontrol('Parent', fig, ...
                             'Style', 'text', ...
                             'String', 'Mode:') ;
            self.TrialSequenceModePopupMenu_ = ...
                ws.uipopupmenu(...
                    'Parent', fig, ...
                    'Tag', 'TrialSequenceMode', ...
                    'Callback', @(source,event)(self.controlActuated(source, event)), ...
                    'String',{'<borkenness>'}, ...
                    'Value',1) ;            
            self.ReturnDelayLabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'ReturnDelay', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', 'Return Delay:', ...
                                         'UnitsString', 's') ;            
            self.ResetButton_ = ...
                ws.uicontrol('Parent', fig, ...
                             'Tag', 'ResetButton', ...
                             'Callback', @(source,event)(self.controlActuated(source, event)), ...
                             'Style', 'pushbutton', ...
                             'String', 'Reset') ;                
                
%             % Second row (from top)
%             self.DispenseToneCheckbox_ = ...
%                 ws.uicontrol('Parent', fig, ...
%                              'Tag', 'DoPlayDispenseTone', ...
%                              'Callback', @(source,event)(self.controlActuated(source, event)), ...
%                              'Style', 'checkbox', ...
%                              'String', 'Play Dispense Tone?') ;                
%             self.DispenseToneFrequencyLabelledEdit_ = ...
%                 ws.LabelledEdit('Parent', fig, ...
%                                          'Tag', 'DispenseToneFrequency', ...
%                                          'Callback', @(source,event)(self.controlActuated(source, event)), ...
%                                          'HorizontalAlignment', 'right', ...
%                                          'LabelString', 'Dispense Tone Frequency:', ...
%                                          'UnitsString', 'Hz') ;
                         
            % Per-condition columns                                     
            self.Condition1Label_ = ...
                ws.uicontrol('Parent', fig, ...
                             'Tag', 'Condition1', ...
                             'Style', 'text', ...
                             'String', 'Condition 1') ;                                         
            self.ToneFrequency1LabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'ToneFrequency1', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', 'Tone Frequency:', ...
                                         'UnitsString', 'Hz') ;
            self.ToneDelay1LabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'ToneDelay1', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', 'Tone Delay:', ...
                                         'UnitsString', 's') ;
            self.ToneDuration1LabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'ToneDuration1', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', 'Tone Duration:', ...
                                         'UnitsString', 's') ;
            self.DispenseDelay1LabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'DispenseDelay1', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', 'Dispense Delay:', ...
                                         'UnitsString', 's') ;
            self.DeliverPosition1XLabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'DeliverPosition1X', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', 'Delivery X:', ...
                                         'UnitsString', 'mm') ;
            self.DeliverPosition1YLabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'DeliverPosition1Y', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', 'Delivery Y:', ...
                                         'UnitsString', 'mm') ;
            self.DeliverPosition1ZLabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'DeliverPosition1Z', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', 'Delivery Z:', ...
                                         'UnitsString', 'mm') ;
            self.DispensePosition1ZLabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'DispensePosition1Z', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', 'Dispense Z:', ...
                                         'UnitsString', 'mm') ;
                                     
            self.Condition2Label_ = ...
                ws.uicontrol('Parent', fig, ...
                             'Tag', 'Condition2', ...
                             'Style', 'text', ...
                             'String', 'Condition 2') ;
            self.ToneFrequency2LabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'ToneFrequency2', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', '', ...
                                         'UnitsString', 'Hz') ;
            self.ToneDelay2LabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'ToneDelay2', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', '', ...
                                         'UnitsString', 's') ;
            self.ToneDuration2LabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'ToneDuration2', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', '', ...
                                         'UnitsString', 's') ;
            self.DispenseDelay2LabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'DispenseDelay2', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', '', ...
                                         'UnitsString', 's') ;
            self.DeliverPosition2XLabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'DeliverPosition2X', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', '', ...
                                         'UnitsString', 'mm') ;
            self.DeliverPosition2YLabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'DeliverPosition2Y', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', '', ...
                                         'UnitsString', 'mm') ;
            self.DeliverPosition2ZLabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'DeliverPosition2Z', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', '', ...
                                         'UnitsString', 'mm') ;
            self.DispensePosition2ZLabelledEdit_ = ...
                ws.LabelledEdit('Parent', fig, ...
                                         'Tag', 'DispensePosition2Z', ...
                                         'Callback', @(source,event)(self.controlActuated(source, event)), ...
                                         'HorizontalAlignment', 'right', ...
                                         'LabelString', '', ...
                                         'UnitsString', 'mm') ;
                                                              
            model.registerController(self) ;
            self.layout_() ;
            self.update() ;
        end
        
        function delete(self)
            if ~isempty(self.Figure_) && ishandle(self.Figure_) ,
                delete(self.Figure_) ;
            end
        end

        function controlActuated(self, source, event)  %#ok<INUSD>
            try
                if source==self.ResetButton_ ,
                    self.Model_.reset() ;
                else
                    % Must be a case where we want to set a model property
                    if source==self.TrialSequenceModePopupMenu_ ,
                        propertyName = 'TrialSequenceMode' ;
                        newValue = ws.getPopupMenuSelection(source, self.Model_.TrialSequenceModeOptions) ;
                    elseif isequal(source.Style, 'checkbox') ;
                        tag = source.Tag ;
                        propertyName = tag ;
                        newValue = source.Value ;
                    else
                        % Must be an edit
                        tag = source.Tag ;
                        propertyName = tag ;
                        rawNewValue = source.String ;
                        newValue = str2double(rawNewValue) ;
                    end
                    % Attempt to set the property name in the model
                    self.Model_.(propertyName) = newValue ;
                end
            catch exception
                self.update() ;  % If an exception is throw, the PezUserClass will generally not tell the controller to update
                if isequal(exception.identifier, 'ws:invalidPropertyValue') ,
                    % do nothing
                else
                    % raise a dialog
                    ws.raiseDialogOnException(exception) ;
                end
            end                                
        end  % function
        
        function update(self)
            % Update values
            ws.setPopupMenuItemsAndSelectionBang(self.TrialSequenceModePopupMenu_, ...
                                                 self.Model_.TrialSequenceModeOptions, ...
                                                 self.Model_.TrialSequenceMode) ;
            self.ReturnDelayLabelledEdit_.EditString = sprintf('%g', self.Model_.ReturnDelay) ;                        
            
%             self.DispenseToneCheckbox_.Value = double(self.Model_.DoPlayDispenseTone) ;
%             self.DispenseToneFrequencyLabelledEdit_.EditString = sprintf('%g', self.Model_.DispenseToneFrequency) ;
            
            self.ToneFrequency1LabelledEdit_.EditString = sprintf('%g', self.Model_.ToneFrequency1) ;                        
            self.ToneDelay1LabelledEdit_.EditString = sprintf('%g', self.Model_.ToneDelay1) ;
            self.ToneDuration1LabelledEdit_.EditString = sprintf('%g', self.Model_.ToneDuration1) ;
            self.DispenseDelay1LabelledEdit_.EditString = sprintf('%g', self.Model_.DispenseDelay1) ;
            self.DeliverPosition1XLabelledEdit_.EditString = sprintf('%g', self.Model_.DeliverPosition1X) ;            
            self.DeliverPosition1YLabelledEdit_.EditString = sprintf('%g', self.Model_.DeliverPosition1Y) ;            
            self.DeliverPosition1ZLabelledEdit_.EditString = sprintf('%g', self.Model_.DeliverPosition1Z) ;            
            self.DispensePosition1ZLabelledEdit_.EditString = sprintf('%g', self.Model_.DispensePosition1Z) ;                        
            
            self.ToneFrequency2LabelledEdit_.EditString = sprintf('%g', self.Model_.ToneFrequency2) ;                        
            self.ToneDelay2LabelledEdit_.EditString = sprintf('%g', self.Model_.ToneDelay2) ;
            self.ToneDuration2LabelledEdit_.EditString = sprintf('%g', self.Model_.ToneDuration2) ;
            self.DispenseDelay2LabelledEdit_.EditString = sprintf('%g', self.Model_.DispenseDelay2) ;
            self.DeliverPosition2XLabelledEdit_.EditString = sprintf('%g', self.Model_.DeliverPosition2X) ;            
            self.DeliverPosition2YLabelledEdit_.EditString = sprintf('%g', self.Model_.DeliverPosition2Y) ;            
            self.DeliverPosition2ZLabelledEdit_.EditString = sprintf('%g', self.Model_.DeliverPosition2Z) ;            
            self.DispensePosition2ZLabelledEdit_.EditString = sprintf('%g', self.Model_.DispensePosition2Z) ;

            % Update enablement
            self.TrialSequenceModePopupMenu_.Enable = ws.onIff(~self.Model_.IsRunning) ;
            self.ReturnDelayLabelledEdit_.Enable = ws.onIff(true) ;            
            self.ResetButton_.Enable = ws.onIff(self.Model_.IsResetEnabled) ;

%             self.DispenseToneCheckbox_.Enable = ws.onIff(true) ;         
%             self.DispenseToneFrequencyLabelledEdit_.Enable = ws.onIff(true && self.Model_.DoPlayDispenseTone) ;         
            
            self.ToneFrequency1LabelledEdit_.Enable = ws.onIff(true) ;         
            self.ToneDelay1LabelledEdit_.Enable = ws.onIff(true) ;
            self.ToneDuration1LabelledEdit_.Enable = ws.onIff(true) ;
            self.DispenseDelay1LabelledEdit_.Enable = ws.onIff(true) ;
            self.DeliverPosition1XLabelledEdit_.Enable = ws.onIff(true) ; 
            self.DeliverPosition1YLabelledEdit_.Enable = ws.onIff(true) ; 
            self.DeliverPosition1ZLabelledEdit_.Enable = ws.onIff(true) ;  
            self.DispensePosition1ZLabelledEdit_.Enable = ws.onIff(true) ;                   
            
            self.ToneFrequency2LabelledEdit_.Enable = ws.onIff(true) ;             
            self.ToneDelay2LabelledEdit_.Enable = ws.onIff(true) ;
            self.ToneDuration2LabelledEdit_.Enable = ws.onIff(true) ;
            self.DispenseDelay2LabelledEdit_.Enable = ws.onIff(true) ;
            self.DeliverPosition2XLabelledEdit_.Enable = ws.onIff(true) ; 
            self.DeliverPosition2YLabelledEdit_.Enable = ws.onIff(true) ;    
            self.DeliverPosition2ZLabelledEdit_.Enable = ws.onIff(true) ;      
            self.DispensePosition2ZLabelledEdit_.Enable = ws.onIff(true) ;
        end             
        
        function result = get.FigurePosition(self)
            result = self.Figure_.Position ;
        end
        
        function syncFigurePosition(self) 
            model = self.Model_ ;
            if model.IsFigurePositionSaved ,
                position = model.SavedFigurePosition ;
                self.Figure_.Position = position ;
            end               
        end
    end  % public methods block    
    
    methods (Access=private)
        function layout_(self)
            figureWidth = 424 ;
            figureHeight = 330 ;
            
            firstRowYBaseline = figureHeight - 36 ;
            defaultYSpacing = 30 ;
            condition1XBaseline = 180 ;
            condition2XBaseline = 300 ;
            popupMenuWidth = 80 ;
            editWidth = 60 ;
            %intergroupExtraYSpace = 20 ;
%             belowFirstRowExtraYSpace = 6 ;
            belowSecondRowExtraYSpace = 16 ;
            belowConditionLabelsYSpace = 20 ;
            %aboveResetButtonExtraYSpace = 10 ;
            modePopupXOffset = 60 ;
            returnDelayXOffset = 240 ;
            resetButtonXOffset = 340 ;
%             doPlayDispenseToneCheckboxXOffset = 30 ;            
%             dispenseToneFrequencyEditXOffset = 310 ;
            
            ws.resizeLeavingUpperLeftFixedBang(self.Figure_, [figureWidth figureHeight]) ;
            
            yOffset = firstRowYBaseline ;
            ws.positionPopupmenuAndLabelBang(self.TrialSequenceModeLabel_, ...
                                             self.TrialSequenceModePopupMenu_, ...
                                             modePopupXOffset, ...
                                             yOffset, ...
                                             popupMenuWidth) ;
            self.ReturnDelayLabelledEdit_.Position(1:2) = [returnDelayXOffset yOffset] ;
            self.ReturnDelayLabelledEdit_.Position(3)   = editWidth ;
            self.ResetButton_.Position(1:2) = [resetButtonXOffset yOffset] ;

%            yOffset = yOffset - defaultYSpacing - belowFirstRowExtraYSpace ;
%             self.DispenseToneCheckbox_.Position(1:2) = [doPlayDispenseToneCheckboxXOffset yOffset] ;
%             self.DispenseToneCheckbox_.Position(3) = 120 ;  % Just wide enough for text
%             self.DispenseToneFrequencyLabelledEdit_.Position(1:2) = [dispenseToneFrequencyEditXOffset yOffset] ;
%             self.DispenseToneFrequencyLabelledEdit_.Position(3) = editWidth ;
            
            yOffset = yOffset - defaultYSpacing - belowSecondRowExtraYSpace ;
            self.Condition1Label_.Position(1:2) = [condition1XBaseline yOffset] ;
            self.Condition2Label_.Position(1:2) = [condition2XBaseline yOffset] ;
                        
            yOffset = yOffset - belowConditionLabelsYSpace ;
            self.ToneFrequency1LabelledEdit_.Position(1:2) = [condition1XBaseline yOffset] ;
            self.ToneFrequency1LabelledEdit_.Position(3)   = editWidth ;
            self.ToneFrequency2LabelledEdit_.Position(1:2) = [condition2XBaseline yOffset] ;
            self.ToneFrequency2LabelledEdit_.Position(3)   = editWidth ;
            
            yOffset = yOffset - defaultYSpacing ;
            self.ToneDelay1LabelledEdit_.Position(1:2) = [condition1XBaseline yOffset] ;
            self.ToneDelay1LabelledEdit_.Position(3)   = editWidth ;
            self.ToneDelay2LabelledEdit_.Position(1:2) = [condition2XBaseline yOffset] ;
            self.ToneDelay2LabelledEdit_.Position(3)   = editWidth ;
            
            yOffset = yOffset - defaultYSpacing ;
            self.ToneDuration1LabelledEdit_.Position(1:2) = [condition1XBaseline yOffset] ;
            self.ToneDuration1LabelledEdit_.Position(3)   = editWidth ;
            self.ToneDuration2LabelledEdit_.Position(1:2) = [condition2XBaseline yOffset] ;
            self.ToneDuration2LabelledEdit_.Position(3)   = editWidth ;
            
            yOffset = yOffset - defaultYSpacing ;
            self.DispenseDelay1LabelledEdit_.Position(1:2) = [condition1XBaseline yOffset] ;
            self.DispenseDelay1LabelledEdit_.Position(3)   = editWidth ;
            self.DispenseDelay2LabelledEdit_.Position(1:2) = [condition2XBaseline yOffset] ;
            self.DispenseDelay2LabelledEdit_.Position(3)   = editWidth ;
            
            yOffset = yOffset - defaultYSpacing ;
            self.DeliverPosition1XLabelledEdit_.Position(1:2) = [condition1XBaseline yOffset] ;
            self.DeliverPosition1XLabelledEdit_.Position(3)   = editWidth ;
            self.DeliverPosition2XLabelledEdit_.Position(1:2) = [condition2XBaseline yOffset] ;
            self.DeliverPosition2XLabelledEdit_.Position(3)   = editWidth ;
            
            yOffset = yOffset - defaultYSpacing ;
            self.DeliverPosition1YLabelledEdit_.Position(1:2) = [condition1XBaseline yOffset] ;
            self.DeliverPosition1YLabelledEdit_.Position(3)   = editWidth ;
            self.DeliverPosition2YLabelledEdit_.Position(1:2) = [condition2XBaseline yOffset] ;
            self.DeliverPosition2YLabelledEdit_.Position(3)   = editWidth ;
            
            yOffset = yOffset - defaultYSpacing ;
            self.DeliverPosition1ZLabelledEdit_.Position(1:2) = [condition1XBaseline yOffset] ;
            self.DeliverPosition1ZLabelledEdit_.Position(3)   = editWidth ;
            self.DeliverPosition2ZLabelledEdit_.Position(1:2) = [condition2XBaseline yOffset] ;
            self.DeliverPosition2ZLabelledEdit_.Position(3)   = editWidth ;
            
            yOffset = yOffset - defaultYSpacing ;
            self.DispensePosition1ZLabelledEdit_.Position(1:2) = [condition1XBaseline yOffset] ;
            self.DispensePosition1ZLabelledEdit_.Position(3)   = editWidth ;
            self.DispensePosition2ZLabelledEdit_.Position(1:2) = [condition2XBaseline yOffset] ;
            self.DispensePosition2ZLabelledEdit_.Position(3)   = editWidth ;
        end        
    end  % private methods block    
    
end  % classdef
